{"name":"True","tagline":"Unit Tests for Sass","body":"True\r\n====\r\n\r\n[![Build Status](https://travis-ci.org/ericam/true.png?branch=master)](https://travis-ci.org/ericam/true)\r\n\r\n*Verb*\r\n\r\n1. To make true; shape, adjust, place, etc., exactly or accurately:\r\n  *True the wheels of a bicycle after striking a pothole.*\r\n2. To make even, symmetrical, level, etc. (often followed by *up*):\r\n  *True up the sides of a door.*\r\n3. To test your Sass code; debug, perfect, etc. (often using *True*):\r\n  *True your sweet plugin before you deploy.*\r\n\r\n\r\nInstall\r\n-------\r\n\r\nin command line:\r\n\r\n```bash\r\n# ruby gem\r\ngem install true\r\n\r\n# bower package\r\nbower install true\r\n\r\n# npm module\r\nnpm install sass-true\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n### In Sass\r\n\r\n```scss\r\n@import \"true\";\r\n\r\n@include test-module('Utilities') {\r\n\r\n  // Testing Functions\r\n  @include test('Map Add [function]') {\r\n    $base: (one: 1, two: 1, three: 1);\r\n    $add: (one: 1, two: 2, three: -1);\r\n\r\n    $test: map-add($base, $add);\r\n    $expect: (one: 2, two: 3, three: 0);\r\n    @include assert-equal($test, $expect,\r\n      'Returns the sum of two numeric maps');\r\n  }\r\n\r\n  // Testing Mixins\r\n  @include test('Font Size [mixin]') {\r\n    @include assert('Outputs a font size and line height based on keyword.') {\r\n      @include input {\r\n        @include font-size(large);\r\n      }\r\n\r\n      @include expect {\r\n        font-size: 2rem;\r\n        line-height: 3rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Optionally show summary report in CSS and/or the command line:\r\n// - If you use Mocha, reporting to the command line is automatic.\r\n// - if you use true-cli, report(terminal) is required for output.\r\n@include report;\r\n```\r\n\r\n### With node-sass and Mocha (or other JS test runners)\r\n\r\n1. Install `true` via npm (`npm install sass-true`).\r\n\r\n2. Write some Sass tests in `test/test.scss` (see above).\r\n\r\n3. Write a shim JS test file in `test/test_sass.js`:\r\n\r\n   ```js\r\n   var path = require('path');\r\n   var true = require('sass-true');\r\n\r\n   var sassFile = path.join(__dirname, 'test.scss');\r\n   true.runSass({file: sassFile}, describe, it);\r\n   ```\r\n\r\n4. Run Mocha, and see your Sass tests reported as individual test results.\r\n\r\nYou can call `runSass` more than once, if you have multiple Sass test files you\r\nwant to run separately.\r\n\r\nThe first argument to `runSass` accepts the same options that node-sass'\r\n`renderSync` function accepts. The only modification `runSass` makes is to add\r\nTrue's sass path to the `includePaths` option, so `@import 'true';` works in\r\nyour Sass test file.\r\n\r\nAny other JS test runner with equivalents to Mocha's `describe` and `it` should\r\nbe usable in the same way; just pass your test runner's `describe` and `it`\r\nequivalents into `runSass`.\r\n\r\n### With ruby-sass on the command line\r\n\r\n```bash\r\ntrue-cli [options] PATH\r\n```\r\n\r\nOptions:\r\n* `-s` silent\r\n* `-c` config file\r\n* `-d` debug config file settings\r\n\r\nConfig file (optional):\r\n\r\n```yaml\r\noptions:\r\n  color: true  # enables colored output\r\n\r\n# require ruby sass extension libraries\r\nrequire:\r\n  - \"compass\"\r\n  - \"serialy_sassy\"\r\n```\r\n\r\ndefault location: `test/true.yml`\r\n\r\n\r\nSettings\r\n--------\r\n\r\nThere is only one setting:\r\n`$true-terminal-output`\r\ntoggles output to the terminal on or off.\r\n\r\n- `true` will show detailed information on failing assertions.\r\n  This is the default, and best for using `true-cli`.\r\n- `false` to turn off all terminal output.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}