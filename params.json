{"name":"True","tagline":"Testing tools for compass/sass","body":"True\r\n====\r\n\r\n*Verb*\r\n\r\n1. To make true; shape, adjust, place, etc., exactly or accurately:\r\n  *True the wheels of a bicycle after striking a pothole.*\r\n2. To make even, symmetrical, level, etc. (often followed by *up*):\r\n  *True up the sides of a door.*\r\n3. To test your Sass/Compass code; debug, perfect, etc. (often using *True*):\r\n  *True your sweet plugin before you deploy.*\r\n\r\nAt this point\r\nTrue can only test values,\r\nnot property/value output.\r\nI'd like that to change in the future,\r\nbut it will require ruby code to achieve.\r\nIn the meantime,\r\nuse True for logical unit tests,\r\nand use version-control for integration testing\r\nby comparing changes in output files.\r\n\r\nInstall\r\n-------\r\n\r\nin command line:\r\n\r\n`gem install true`\r\n\r\nin config.rb:\r\n\r\n`require 'true'`\r\n\r\nUsage\r\n-----\r\n\r\nProduction example from\r\n[Susy Next](https://github.com/ericam/susy/blob/susy-next/test/scss/math/_columns.scss):\r\n\r\n```scss\r\n@import \"true\";\r\n\r\n// Column Math Tests\r\n// =================\r\n\r\n@include test-module('Column Math') {\r\n\r\n  // Is Symmetrical\r\n  // --------------\r\n\r\n  @include test('[function] is-symmetrical()') {\r\n    $sym: 12;\r\n    $asym: 1 2 4 1 2 1;\r\n    $baz: compact(4);\r\n\r\n    // 12 is a symmetrical grid.\r\n    $s: is-symmetrical($sym);\r\n    @include assert-true($s,\r\n      'Simple number should be symmetrical grid.');\r\n\r\n    // (1 2 4 1 2 1) is not a symmetrical grid.\r\n    $a: is-symmetrical($asym);\r\n    @include assert-false($a,\r\n      'List should be asymmetrical grid.');\r\n\r\n    // compact(4) is not a symmetrical grid (because it is a list).\r\n    $b: is-symmetrical($baz);\r\n    @include assert-false($b,\r\n      'Single-item list should be asymmetrical grid.');\r\n  }\r\n\r\n\r\n  // Column Count\r\n  // ------------\r\n\r\n  @include test('[function] column-count()') {\r\n    $sym: 12;\r\n    $asym: 1 2 4 1 2 1;\r\n\r\n    // A symmetrical grid is equal to its column count.\r\n    $s-count: column-count($sym);\r\n    @include assert-equal($s-count, $sym,\r\n      'Symmetrical grid-count should equal $columns setting.');\r\n\r\n    // An asymmetrical grid has a column-count equal to its length.\r\n    $a-count: column-count($asym);\r\n    $a-length: length($asym);\r\n    @include assert-equal($a-count, $a-length,\r\n      'Asymmetrical grid-count should equal $columns length.');\r\n  }\r\n\r\n\r\n  // Column Sum\r\n  // ----------\r\n\r\n  @include test('[function] symmetrical column-sum()') {\r\n    $cols   : 9;\r\n    $guts   : .5;\r\n    $sum    : column-sum($cols, $guts);\r\n    $outer  : column-sum($cols, $guts, outer);\r\n\r\n    @include assert-equal($sum, 13,\r\n      'Column-sum for \"9 .5\" should be \"13\".');\r\n\r\n    @include assert-equal($outer, 13.5,\r\n      'Outer column-sum for \"9 .5\" should be \"13.5\".');\r\n  }\r\n\r\n  @include test('[function] asymmetrical column-sum()') {\r\n    $sum    : column-sum(1 2 3 1 2, .25);\r\n    $outer  : column-sum(1 2 3 1 2, .25, outer);\r\n\r\n    @include assert-equal($sum, 10,\r\n      'Column-sum for \"(1 2 3 1 2) .25\" should be \"10\".');\r\n\r\n    @include assert-equal($outer, 10.25,\r\n      'Outer column-sum for \"(1 2 3 1 2) .25\" should be \"10.25\".');\r\n  }\r\n\r\n\r\n  // Get Columns\r\n  // -----------\r\n\r\n  @include test('[function] symmetrical get-columns()') {\r\n    $span: 3;\r\n    $context: 12;\r\n    $sub: get-columns($span, 4, $context);\r\n\r\n    @include assert-equal($sub, $span,\r\n      'Symmetrical get-columns subset should be equal to its span.');\r\n  }\r\n\r\n  @include test('[function] asymmetrical get-columns()') {\r\n    $span: 3;\r\n    $context: 1 2 3 1 2;\r\n    $sub: get-columns($span, 2, $context);\r\n\r\n    @include assert-equal($sub, 2 3 1,\r\n      'Get-columns subset for \"3 of (1 2 3 1 2) at 2\" should be \"2 3 1\".');\r\n  }\r\n\r\n\r\n  // Get Column Span Sum\r\n  // -------------------\r\n\r\n  @include test('[function] symmetrical get-column-span-sum()') {\r\n    $cols: 12;\r\n    $guts: 1/8;\r\n\r\n    $sum: get-column-span-sum(3, 2, $cols, $guts);\r\n    @include assert-equal($sum, 3.25,\r\n      'Inner span-sum for \"3 of 12 1/8 at 2\" should be \"3.25\"');\r\n\r\n    $sum: get-column-span-sum(3, last, $cols, $guts, outer);\r\n    @include assert-equal($sum, 3.375,\r\n      'Outer span-sum for \"last 3 of 12 1/8\" should be \"3.375\".');\r\n  }\r\n\r\n  @include test('[function] asymmetrical get-column-span-sum()') {\r\n    $cols: 1 2 3 2 1 2 3;\r\n    $guts: 1/4;\r\n\r\n    $sum: get-column-span-sum(3, 2, $cols, $guts);\r\n    @include assert-equal($sum, 7.5,\r\n      'Inner span-sum for \"3 at 2 of (1 2 3 2 1 2 3)\" should be \"7.5\".');\r\n\r\n    $sum: get-column-span-sum(3, last, $cols, $guts, outer);\r\n    @include assert-equal($sum, 6.75,\r\n      'Outer span-sum for \"last 3 of (1 2 3 2 1 2 3)\" should be \"6.75\".');\r\n  }\r\n\r\n}\r\n```\r\n\r\n**True** will report detailed results in the terminal,\r\nand a summary of results in the output css.\r\n\r\nHere's the Susy \"Column Math\" CSS output:\r\n\r\n```css\r\n/*\r\n\r\n### Column Math ------ */\r\n/*  - [function] is-symmetrical() (3 assertions, 3 passed, 0 failed) */\r\n/*  - [function] column-count() (2 assertions, 2 passed, 0 failed) */\r\n/*  - [function] symmetrical column-sum() (2 assertions, 2 passed, 0 failed) */\r\n/*  - [function] asymmetrical column-sum() (2 assertions, 2 passed, 0 failed) */\r\n/*  - [function] symmetrical get-columns() (1 assertions, 1 passed, 0 failed) */\r\n/*  - [function] asymmetrical get-columns() (1 assertions, 1 passed, 0 failed) */\r\n/*  - [function] symmetrical get-column-span-sum() (2 assertions, 2 passed, 0 failed) */\r\n/*  - [function] asymmetrical get-column-span-sum() (2 assertions, 2 passed, 0 failed) */\r\n/*\r\n    Summary:\r\n    - 8 Tests\r\n    - 8 Passed\r\n    - 0 Failed */\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}